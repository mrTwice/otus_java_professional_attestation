package ru.otus.java.professional.yampolskiy.ttuserservice.controllers;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.oauth2.core.OAuth2AuthenticatedPrincipal;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import ru.otus.java.professional.yampolskiy.ttuserservice.dtos.error.ErrorDTO;
import ru.otus.java.professional.yampolskiy.ttuserservice.dtos.error.ValidationEmailErrorDTO;
import ru.otus.java.professional.yampolskiy.ttuserservice.dtos.error.ValidationEmailPartErrorDTO;
import ru.otus.java.professional.yampolskiy.ttuserservice.dtos.user.UserCreateDTO;
import ru.otus.java.professional.yampolskiy.ttuserservice.entities.User;
import ru.otus.java.professional.yampolskiy.ttuserservice.mappers.UserMapper;
import ru.otus.java.professional.yampolskiy.ttuserservice.services.UserService;

@Slf4j
@RestController
@RequestMapping("/api/v1/internal/users")
@RequiredArgsConstructor
@Tag(name = "Internal Users", description = "–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, SAS)")
public class InternalUserController {

    private final UserService userService;
    private final UserMapper userMapper;

    @Operation(
            summary = "–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ SAS",
            description = "–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –ø—Ä–æ–≤–µ—Ä–∫–∞ client_id = internal-service-client"
    )
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"),
            @ApiResponse(responseCode = "403", description = "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (–Ω–µ internal client)"),
            @ApiResponse(responseCode = "400", description = "–û—à–∏–±–∫–∞"),
            @ApiResponse(responseCode = "400", description = "–û—à–∏–±–∫–∞", content = @Content(schema = @Schema(implementation = ErrorDTO.class))),
            @ApiResponse(responseCode = "422", description = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email", content = @Content(schema = @Schema(implementation = ValidationEmailErrorDTO.class))),
            @ApiResponse(responseCode = "422", description = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email", content = @Content(schema = @Schema(implementation = ValidationEmailPartErrorDTO.class))),
            @ApiResponse(responseCode = "404", description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", content = @Content(schema = @Schema(implementation = ErrorDTO.class)))
    })
    @PostMapping
    @PreAuthorize("@accessPolicy.isInternalClient(authentication)")
    public ResponseEntity<Void> createFromSas(
            @RequestBody @Valid @Parameter(description = "–î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è") UserCreateDTO dto,
            @Parameter(hidden = true) Authentication authentication) {

        if (authentication instanceof OAuth2AuthenticatedPrincipal principal) {
            log.info("üêæ Principal claims: {}", principal.getAttributes());
        }

        User user = userMapper.toEntityFromUserCreateDTO(dto);
        userService.createUser(user);
        return ResponseEntity.status(HttpStatus.CREATED).build();
    }
}
