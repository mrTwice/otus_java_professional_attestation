package ru.otus.java.professional.yampolskiy.ttoauth2authorizationserver.oidc.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.oauth2.core.oidc.OidcUserInfo;
import org.springframework.security.oauth2.core.oidc.endpoint.OidcParameterNames;
import org.springframework.security.oauth2.server.authorization.token.JwtEncodingContext;
import org.springframework.security.oauth2.server.authorization.token.OAuth2TokenCustomizer;
import ru.otus.java.professional.yampolskiy.ttoauth2authorizationserver.oidc.service.OidcUserInfoService;

@Configuration
@Slf4j
public class IdTokenCustomizerConfig {
    @Bean
    public OAuth2TokenCustomizer<JwtEncodingContext> idTokenCustomizer(
            OidcUserInfoService userInfoService) {
        return (context) -> {
            if (OidcParameterNames.ID_TOKEN.equals(context.getTokenType().getValue())) {
                log.info("üéØ Customizing idtoken for client: {}", context.getRegisteredClient().getClientId());

                // TODO: –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É ‚Äî –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª–µ–π–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞, grant_type, scope –∏ —Ç.–¥.
                // –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ID —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –æ–Ω –Ω–µ –∏–∑ authorization_code flow
                // TODO: –ü–æ–¥–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Ñ–∏–ª—è, —Ä–æ–ª–µ–π, —Å—Ç–∞—Ç—É—Å–∞)
                // TODO: –í—Å—Ç–∞–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö OIDC-–∫–ª–µ–π–º–æ–≤
                // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–ª–µ–π–º–æ–≤: auth_time, acr, amr –∏ —Ç.–ø. ‚Äî –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è OIDC —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                // TODO: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –±–∏–∑–Ω–µ—Å-–∫–ª–µ–π–º–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–æ–ª–∏, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏ –ø—Ä.
                // claims.put("user_role", "admin");
                // TODO: –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ID —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                // log.debug("Issuing ID token for user={}, claims={}", context.getPrincipal().getName(), claims);
                OidcUserInfo userInfo = userInfoService.loadUser(
                        context.getPrincipal().getName());
                context.getClaims().claims(claims ->
                        claims.putAll(userInfo.getClaims()));
            }
            // TODO: –î–µ–ª–µ–≥–∏—Ä—É–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ ‚Äî —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å IdTokenClaimContributor –∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∏–Ω–æ–≤
            // –ü—Ä–∏–º–µ—Ä: —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–∏–Ω–æ–≤ –∏ –≤—ã–∑—ã–≤–∞—Ç—å contributors.forEach(c -> c.contribute(context, claims));
            // –†–∞–∑–±–∏—Ç—å –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—é –Ω–∞ –º–æ–¥—É–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, StandardClaimsCustomizer, ProfileClaimsCustomizer)
            // –ò–ª–∏ –≤–Ω–µ–¥—Ä–∏—Ç—å –º–µ—Ö–∞–Ω–∏–∑–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ TokenClaimContributor –∏ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Ö –ø–æ –æ—á–µ—Ä–µ–¥–∏.
            /*
                interface IdTokenClaimContributor {
                    void contribute(JwtEncodingContext context, Map<String, Object> claims);
                }
             */
        };
    }
}
